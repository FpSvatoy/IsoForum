-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Окт 06 2024 г., 04:06
-- Версия сервера: 10.5.17-MariaDB
-- Версия PHP: 8.1.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `isoForum`
--

-- --------------------------------------------------------

--
-- Структура таблицы `comment`
--

CREATE TABLE `comment` (
  `comment_id` int(11) NOT NULL,
  `page_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `reply_to` int(11) DEFAULT NULL,
  `text` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `comment`
--

INSERT INTO `comment` (`comment_id`, `page_id`, `author_id`, `reply_to`, `text`) VALUES
(1, 1, 45, NULL, 'Протестируем работу комментариев'),
(2, 1, 46, 1, 'Протестируем ответ на комментарий'),
(22, 1, 46, 1, 'Проверка на ответ'),
(31, 1, 45, NULL, 'Новый коммент от меня великого'),
(32, 1, 45, 22, 'Проверка в очередной раз'),
(38, 1, 74, 32, 'Отвечаю'),
(39, 4, 74, NULL, 'Проверка комментария '),
(40, 4, 74, 39, 'Отвечаем на комментарий');

-- --------------------------------------------------------

--
-- Структура таблицы `content_page`
--

CREATE TABLE `content_page` (
  `page_id` int(11) NOT NULL,
  `name_page` varchar(30) NOT NULL,
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `content_page`
--

INSERT INTO `content_page` (`page_id`, `name_page`, `content`) VALUES
(1, 'Теория', '<h1 style=\"text-align:center;\">Разработка</h1>	\n				<article> <p>Разработка игры, как вы наверное догадываетесь, это не только красивый дизайн, хорошая музыка, интересный сюжет.\n					Разработка игры, её физики, отрисовки, той же боевки и диалогов - все это является основой для того что бы игрок мог приятно провести время и возможно даже что то открыть новое в виртуальном мире.\n					Но как мы прекрасно знаем, чаще всего программистов только ругают, когда находят какой-либо кривой код/баг.\n					Так что давай те же погрузимся и посмотрим, с какими задачами и проблемами во время разработки игр сталкиваются программисты, и через что пришлось пройти многим из них, что бы создавать новые миры.</p>\n					<p>В этом разделе, как вы можете увидеть в меню слева, рассказываются такие ключевые моменты в разработке игры как: архитектура, алгоритмы, диалоговая система, а так же доп. приложения.</p>\n					<p>Думаю, стоит упомянуть, что наша игра разрабатывается в изометрической системе координат. Изометрические 2D игры являются разумным компромиссом между красотой 3D игр и простотой технической реализации 2D игр.</p>\n					<p>При разработке движка для своей игры, вам так или иначе придется столкнуться с алгоритмами. Либо же взять уже все готовое, но непонятно как работающее из уже готового движка. Именно потому, мы выбрали что то среднее, использовав движок Slick2D, с открытым исходным кодом, который позволял нам при случае чего просто прочитать код и воспользоваться необходимыми функциями.\n					Однако, всеми основными функциями он не обладал, а потому, необходимо было разработать и/или написать лично некоторые алгоритмы, которые мы с вами и рассмотрим.</p>\n					<p>Следует понимать, что этот движок хоть и являлся какой-никакой основой, но он нас не ограничивал в отличии от многих других по типу Unity. Все чего нам не хватало, или мы видели иначе - необходимо было написать своими руками. А так как из движка была взята лишь основа и мелкие упрощающие жизнь функции, некоторые основопологающие алгоритмы и системы были написаны, а некоторые и придуманы, собственоручно.\n					Например такими алгоритмом и системой, которые мы рассмотрим на нашем сайте, являются: Алгоритм иерархии отрисовки и диалоговая система.</p>\n					<p>Архитектура является сложной темой и в обычных десктопных приложениях, а потому, в игре, она выходит на новый уровень. И в обычных условиях архитектура приложения переделывается множество раз, чаще всего достигая лишь \"приемлемого\" уровня. Нашу игру это не обошло сторой. Было испробовано несколько разных подходов, как минимум только в этой версии игры. Естественно, все изменения наврядли мы рассмотрим, но по ключевым как минимум пройдемся.</p>\n					<p>Помимо того, если ваша команда решится писать самостоятельно алгоритмы, надо быть готовыми к тому, что если алгоритмы того потребуют, то вы будете писать для них приложения, которые упростят вам ввод необходимых метаданных, с которыми они будут работать.\n					И да, не просто так я это тут написал, у нас так же было написано несколько версий приложений для работы с метаданными сущностей.\n					А именно - Entity Editor, который позволяет нам не \"примерно\" вводить метаданные для каждой из сущностей руками, а как современным людям, мышкой обводить необходимые контуры, данные которых сохраняются в необходимый файл, и корректно подаются при загрузке в игру. Такие приложения позволяют мало того что сделать метаданные более точными, но что самое главное - значительно сократить затрачиваемое время на это.</p>\n					<p>Все это, вы можете рассмотреть в боковом меню слева, возможно, узнав что то новое для себя.</p>\n				</article>'),
(4, 'Изометрия', '<h1 style=\"text-align:center;\"> Аналитическая часть </h1>\r\n<article> \r\n<p>В современном мире программная индустрия развивается и во многих областях, связанных с ней, появились инструменты – фреймворки – позволяющие облегчать и ускорять разработку. В Gamedev-e так же появилось ПО, которое позволяет повторно использовать код и расширения, тем самым создавая основу, фундамент для игр, без особых усилий. Зачастую, набор функций редко привязан к какой-либо определенной игре, однако и такое имеет место быть, если он был написан, учитывая уникальные возможности игры. </p>\r\n<p>Из-за огромного количества разнообразия игр, создать единый набор ПО учитывающий все возможности – невозможно. Несмотря на то, что платформы для разработки игр могут обладать похожими в масштабном плане системами, их реализация может, и скорее всего будет, значительно отличаться друг от друга. В зависимости от того под какие жанры пишется платформа для разработки игр, набор функций будет так же изменен. </p>\r\n<p>Явным примером причины различия игровых систем, могут послужить следующие жанры: визуальные новеллы, шутеры, головоломки, платформеры, стратегии, казуальные игры, MMO, PVP, RPG и другие. Если сравнивать их, то каждый будет обладать своей чертой, присущей лишь ему. \r\n<p>Игры также можно различить между друг другом по особенности графики, а именно: 2D, 3D и 2.5D. </p>\r\n<p>В 2D играх используется плоская графика, называемая спрайтами. Её представителями являются «платформеры» (вид сбоку) и игры с видом сверху. Камера не имеет перспективы, используется ортогональная проекция. ПО для их разработки должно обладать своеобразной боевой системой и физикой, а также довольно примитивной отрисовкой обьектов, при этом в современных решениях, поддерживаются анимации и частицы, для более приятного визуального эффекта, как показано на рисунке 1. </p>\r\n<img src=\"res/collapsed.jpg\" class=\"center-pic\"/>\r\n<p>Одним из представителей 3D игр можно выделить такой жанр как «шутер». В таких играх используется трехмерное пространство, которое состоит из моделей объектов, созданных в специальном редакторе. Для создание подобных игр, платформы включают в себя такие технологи как: расчет физики движения моделей, их взаимодействие, тени, шейдеры, частицы, алгоритмы удаления скрытых линий и поверхностей, рендеринг и другие. </p>\r\n<img src=\"res/ metro.png\" class=\"center-pic\"/>\r\n<p>Как понятно по описанию некоторого количества набора функций, в 3D играх используются куда более мощные и развитые технологии. Зачастую, это игры именно от первого лица, однако, так же существуют и другие игры, в которых камера меняет свое положение, и у игроков появляется возможность следить за происходящим с других ракурсов, но такой подход, как правило, используют другие жанры. </p>\r\n	<p>Вышеприведенные в жанры игр все обладают той или иной похожей системой, однако, из-за различий между собой, реализованы они </p>\r\n<h3>1.1 Обзор предметной области</h3>	\r\n<p>Ключевой задачей в играх является отрисовка обьектов таким образом, чтобы видимые </p>\r\n<p>Изометрическая проекция — это разновидность аксонометрической проекции, при которой в отображении трёхмерного объекта на плоскость коэффициент искажения по всем трём осям один и тот же. Другими словами, соотношение сторон объектов не меняется при удалении от центра. </p>\r\n<p>Слово «изометрическая» в названии проекции означает «равный размер», отражая тот факт, что в этой проекции углы между осями x, y, z равны друг другу и составляют 120 градусов. Это можно увидеть на рисунке 1. </p>\r\n<img src=\"res/isometricProjection.png\" class=\"center-pic\"/>\r\n<p>Данная проекция стала применяться в играх еще в 80-х годах, чтобы отойти от традиционных и привычных видов сверху и сбоку, когда 3D графика была не доступна. Однако, не смотря на название, как правило, «изометрическая» проекция в играх не является «истинно» изометрической, т.е. оси не всегда ориентированы под равным углом в 120 градусов друг к другу. Этот термин стал использоваться в играх как некое объединение в общую группу таких видов проекции как: изометрическая, диметрическая и триметрическая. </p>\r\n<p>Основная проблема изометрии ранее была связана с ограничением растровой графики. При отклонении линий по осям x и y к горизонтали на 30 градусов, или 60 градусов друг к другу, отношение пикселей ширины к высоте будет примерно равным 1,732:1, что неудобно как при рисовании спрайтов, из-за не аккуратного пиксельного узора, так и при позиционировании объектов на карте. Однако, при диметрии, используемой зачастую в играх, когда оси x и y отклоняются на 26.565 градусов к горизонтали и 53.13 градусов друг к другу, несмотря на то что углы являются дробными, соотношение сторон равняется 2:1. </p>\r\n<p>Наглядный пример отличия проекций показан в виде плиток, на рисунке 2, где верхняя плитка изометрическая, а нижняя диметрическая. </p>\r\n<img src=\"res/tile.png\" class=\"center-pic\"/>\r\n<p>Проекция является диметрической в том случае, если коэффициенты искажения по двум осям имеют равные значения, а третья ось равняется любому значению (рисунок 3). </p>\r\n<img src=\"res/dimetric.jpg\" class=\"center-pic\"/>\r\n<p>На сегодняшний день трудности растровой графики решаются благодаря технологиям сглаживания, потому так же используются и другие виды проекции, например: триметрическая – когда все углы осей различны. </p>\r\n<img src=\"res/trimetiya.jpg\" class=\"center-pic\"/>\r\n<p>Термин «изометрия» так же часто применяется в играх похожих на неё, включая смешанную перспективу и вид с птичьего полёта, а потому, далее, все возможные перспективы будут называться соответственно. </p>\r\n</article>\r\n');

-- --------------------------------------------------------

--
-- Структура таблицы `notification`
--

CREATE TABLE `notification` (
  `notice_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL,
  `login` varchar(30) NOT NULL,
  `password` text NOT NULL,
  `surname` text NOT NULL,
  `name` text NOT NULL,
  `nickname` varchar(40) NOT NULL,
  `user_group` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`user_id`, `login`, `password`, `surname`, `name`, `nickname`, `user_group`) VALUES
(45, 'fpsviatoy', '$2y$10$mluWRqFVW0piYHx7h4S0h.Z/Q9JzabUPuxpApxrLznJ3ef7du5VhG', 'Иванников', 'Святослав', 'holyprogger', 3),
(46, 'sova', '$2y$10$qEJXPt5HtqgEvVRis3ogMuK3JxWemxyl/bjuosZDjXSdGeFf5vTPm', 'Левихин', 'Денис', 'Sova', 3),
(47, 'bolom', '$2y$10$8cbjc3ORP4CnnIASUOrM4.NFsBDT7wtZ5RcA3UyOg9s.7/PyjKoHy', 'Левихин', 'Роман', 'bolom_31', 1),
(49, 'danarati', '$2y$10$SwozCW3JocbD9fB8NdxFw.LCRyXy8M8bDwd3zlwH4Kipj86E/GDti', 'Лозовая', 'Рати', 'Rati', 2),
(53, 'itsmered', '$2y$10$hIM2RPr3kU7bDfeRllIpAeD213DaioBuewfgJcUjfs1KcROgSSfZW', 'itsMered', 'Me', 'itsMyNickname', 1),
(54, 'testmoder', '$2y$10$UMiY9sIxlGWUD3Y5HKYcr.9nJHukpb8aWSNrdufr5/gD/QrqcJH7.', 'Модер', 'Мордер', 'Morder_Hobbit', 2),
(55, 'admin', '$2y$10$DrMVisdxDpmezIJORzWk3ecBNAdgZgbaquUEYgRJa5btZOuCwBpU2', 'Иванников', 'Святослав', 'Fpsviatoy', 3),
(56, 'hellproger', '$2y$10$tj0gxSGvrr8KzBtjuci8p.EWJRcGXMgbsn.zk1NNgcVF6jUsVds5S', 'Иванников', 'Свят', 'hellProger', 1),
(57, 'dopslot', '$2y$10$JndSOzB5SzfeXJkixHTqHuUdgZfpiCxejWRPsA5/0qLv1U70d2Fae', 'Alaltla', 'Alalal', 'Alound', 1),
(58, 'rey', '$2y$10$moUzQtC0YxsN.cC87aelq.9bAUHwca8yAkKjWldC2CnpUwRZtPoke', 'Bdfyybrjd', 'Sdsds', 'Roman_admin', 3),
(73, 'leyla', '$2y$10$46PE5fLhqCiazQGc7B71yuttRGWCpGlte3aweVI9WIYw13Iy5kUGa', 'Задолбало', 'Тестировать', 'alaleyla', 1),
(74, 'adminadmin', '$2y$10$.soALwtsvzgjxbwdE4Omnek.CJWq.2sJHw6cijr3eq522mmDPOFfi', 'adminadmin', 'adminadmin', 'adminadmin', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `user_group`
--

CREATE TABLE `user_group` (
  `group_id` int(11) NOT NULL,
  `group_name` varchar(30) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `user_group`
--

INSERT INTO `user_group` (`group_id`, `group_name`) VALUES
(3, 'administrator'),
(2, 'moderator'),
(1, 'subscriber');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`comment_id`);

--
-- Индексы таблицы `content_page`
--
ALTER TABLE `content_page`
  ADD PRIMARY KEY (`page_id`);

--
-- Индексы таблицы `notification`
--
ALTER TABLE `notification`
  ADD PRIMARY KEY (`notice_id`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`user_id`),
  ADD UNIQUE KEY `login` (`login`),
  ADD UNIQUE KEY `nickname` (`nickname`);

--
-- Индексы таблицы `user_group`
--
ALTER TABLE `user_group`
  ADD PRIMARY KEY (`group_id`),
  ADD UNIQUE KEY `group_name` (`group_name`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `comment`
--
ALTER TABLE `comment`
  MODIFY `comment_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=41;

--
-- AUTO_INCREMENT для таблицы `content_page`
--
ALTER TABLE `content_page`
  MODIFY `page_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT для таблицы `notification`
--
ALTER TABLE `notification`
  MODIFY `notice_id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=76;

--
-- AUTO_INCREMENT для таблицы `user_group`
--
ALTER TABLE `user_group`
  MODIFY `group_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
